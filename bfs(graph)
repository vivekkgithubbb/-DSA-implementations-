#include<iostream>
#include<list>
#include<queue>
#include<unordered_map>
using namespace std;
template<typename t>
class graph{
	list<t>*arr;
	int n;
	public:
	graph(t N){
		arr=new list<t>[N];
		n=N;
	}

void addedge(t u,t v,bool birdi=true){
	arr[u].push_back(v);
	if(birdi==true){
		arr[v].push_back(u);
	}
}
void bfs(t x){
	queue<t>q;
	q.push(x);
	unordered_map<t,bool>visited;
	visited[x]=true;
	while(!q.empty()){
		t p=q.front();
		q.pop();
		cout<<p<<" ";
		for(auto ne:arr[p]){
			if(!visited[ne]){
				q.push(ne);
				visited[ne]=true;
			}
		}
	}
}
};
int main(){
	graph<int>g(5);
	g.addedge(0,1);
	g.addedge(0,4);
	g.addedge(1,4);
	g.addedge(4,3);
	g.addedge(1,3);
	g.addedge(3,2);
	g.addedge(1,2);
	g.bfs(2);
}
