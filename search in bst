#include<iostream>
#include<queue>
using namespace std;
class node{
	public:
	int data;
	node*left;
	node*right;
	node(int d){
		data=d;
		left=NULL;
		right=NULL;
	}
};
node*insertbst(node*root,int d){
	if(root==NULL){
		root=new node(d);
		return root;
	}
	else if(d>root->data){
	  root->right=insertbst(root->right,d);
	  return root;
	}
	else{
		root->left=insertbst(root->left,d);
		return root;
	}
}
node*buildbst(){
	node*root=NULL;
	int d;
	cin>>d;
	while(d!=-1){
		root=insertbst(root,d);
		cin>>d;
	}
	return root;
}


bool searchinbst(node*root,int key){
	if(root==NULL){
		return false;
	}
	if(key==root->data){
		return true;
	}
	else if(key<=root->data){
		return searchinbst(root->left,key);
	}
	else{
		return searchinbst(root->right,key);
	}
}

int main(){
	node*root=buildbst();
int key;
	cin>>key;
	if(searchinbst(root,key)==true){
		cout<<"key is found"<<endl;
	}
	else{
		cout<<"key is not found";
	}
}
