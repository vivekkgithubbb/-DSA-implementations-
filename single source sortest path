#include<iostream>
#include<list>
#include<queue>
#include<unordered_map>
using namespace std;
template<typename U>
class graph{
	unordered_map<U,list<U>>h;
	public:
		void addedge(U u,U v,bool birde=false){
		     h[v].push_back(u);
			 if(birde==true){
			 	h[u].push_back(v);
			 }	
		}
	int sssp(int src,int dest){
	queue<U>q;
	q.push(src);
	unordered_map<U,bool>visited;
	unordered_map<U,int>distance;
	unordered_map<U,U>parent;
	parent[src]=src;
	visited[src]=true;
	distance[src]=0;
	while(!q.empty()){
	     U p=q.front();
	     q.pop();
	     for(auto x:h[p]){
	     	if(!visited[x]){
	     	q.push(x);
	     	visited[x]=true;
	     	distance[x]=distance[p]+1;
	     	parent[x]=p;	
			 }
		 }
	}
		int temp=dest;
		while(temp!=src){
			cout<<temp<<"<--";
			temp=parent[temp];
		}
		cout<<temp;
		cout<<endl;
		return distance[dest];
	}
	
};
int main(){
graph<int>g;
    g.addedge(0,1);
    g.addedge(0,4);	
    g.addedge(4,3);
    g.addedge(4,1);
    g.addedge(1,2);
    g.addedge(3,2);
cout<<g.sssp(3,0);
}
