#include<iostream>
#include<queue>
#include<list>
#include<unordered_map>
using namespace std;
template<typename t> 
class graph{
	list<t>*arr;
	int n;
	public:
	graph(int N){
	    n=N;
	    arr=new list<t>[N];
	}
void addedge(t u,t v,bool birde=true){
	arr[u].push_back(v);
	if(birde==true){
		arr[v].push_back(u);
	}
}
void distancefromsource(t src){
	queue<t>q;
	q.push(src);
	unordered_map<t,bool>visited;
	unordered_map<t,int>distance;
    visited[src]=true;
	distance[src]=0;
	while(!q.empty()){
		t p=q.front();
		q.pop();
	//	cout<<p<<" ";
		for(auto ne:arr[p]){
			if(!visited[ne]){
				q.push(ne);
				visited[ne]=true;
				distance[ne]=distance[p]+1;
			}
		}
	}
	for(auto a:distance){
		cout<<"distance from "<<src<<"to "<<a.first<<"is "<<a.second;
		cout<<endl;
	}
	
}
};
int main(){
	graph<int>g(5);
  
    g.addedge(0,1);
    g.addedge(0,4);
    g.addedge(1,4);
    g.addedge(4,3);
    g.addedge(1,3);
    g.addedge(3,2);
    g.addedge(1,2);
	g.distancefromsource(2);
	
	
	
}
